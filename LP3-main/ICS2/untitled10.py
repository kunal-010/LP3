# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/117hEUczsVQsL8TjSfPVLN9TBuc4R1hOE
"""

from random import randint
import math

def point(a,b):
  if((4 * a ** 3 + 27 * b ** 2)!=0):
    x=1
    while True:
      rhs = x ** 3 + a * x + b
      y = int(math.sqrt(rhs))
      lhs = y * y
      if lhs == rhs :
        return [x,y]
      else :
        x += 1
    
  else :
    print("Enter other coefficients!")

a = int(input("a"))
b = int(input("b"))

private_a = 13
private_b = 15

generator = point(a,b)

k = randint(0,10)

public_a = [private_a*generator[0] , private_a*generator[1]]
public_b = [private_b*generator[0] , private_b*generator[1]]

m = int(input("Message"))
kg = k*(generator[0]+generator[1])
kPb = m + (k*(public_b[0])+k*public_b[1])

ciphertext = [kg,kPb]

print(ciphertext)

r = kg * private_b
plaintext = kPb - r
print(plaintext)

def encrypt(m):
  M = ord(m)
  kg = k * (generator[0]+generator[1])
  kPb = M + (k*(public_b[0])+k*public_b[1])
  return [kg,kPb]
  
def decrypt(kg,kPb):
  r = kg * private_b
  p = kPb - r
  return chr(p)



p = input("Message")
kg_arr ,kPb_arr = [],[]
for c in p:
  kg, kPb = encrypt(c)
  kg_arr.append(kg)
  kPb_arr.append(kPb)

print(kg_arr)
print(kPb_arr)

c = ''
for kg,kPb in zip(kg_arr,kPb_arr):
  c += decrypt(kg,kPb)

print(c)

